Index: src/controller/ParserEngine.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package controller;\r\n\r\nimport Model.database.Database;\r\nimport Model.levels.Item;\r\nimport Model.levels.room.Room;\r\nimport Model.levels.room.RoomBuilder;\r\nimport Model.levels.room.RoomObjects;\r\nimport Model.PlayerCords;\r\nimport View.Window;\r\nimport Model.gameTimer.GameTimer;\r\nimport Model.levels.LevelGridSystem;\r\nimport java.util.*;\r\n\r\npublic class ParserEngine {\r\n\r\n    //create private sets for nouns and verbs so that they remain unique.\r\n    //could try an array or a dictionary, but I don't care about order.\r\n    private List<RoomObjects> objectList;\r\n    private HashSet<String> verbs;\r\n    private HashSet<String> nouns;\r\n    private Window window;\r\n    private Database db;\r\n    private ArrayList<String> commandHistory;\r\n    private LevelGridSystem levels;\r\n\r\n    //GAME ENGINE STUFF\r\n    private GameTimer gameTimer;\r\n    private PlayerCords playerCords;\r\n\r\n    private Room kitchen;\r\n    //private Cabinet cabinet1;\r\n    private RoomObjects cabinet;\r\n    private RoomObjects refrigerator;\r\n\r\n\r\n    private Room bathroom;\r\n    private RoomObjects sink;\r\n    private RoomObjects tub;\r\n    private RoomObjects toilet;\r\n    private RoomObjects cabinet2;\r\n\r\n    private Room bedroom;\r\n    private RoomObjects bed;\r\n    private RoomObjects dresser;\r\n    private RoomObjects vanity;\r\n\r\n    private Room livingRoom;\r\n    private RoomObjects sofa;\r\n    private RoomObjects lamp;\r\n    private RoomObjects piano;\r\n    private RoomObjects tv;\r\n    private RoomObjects table;\r\n\r\n    private Room garage;\r\n    private RoomObjects car;\r\n    private RoomObjects mower;\r\n\r\n\r\n    //level design\r\n   private Room hallwayOne;\r\n   private Room hallwayTwo;\r\n   private Room hallwayThree;\r\n   private Room hallwayFour;\r\n   private Room hallwayFive;\r\n   private Room hallwaySix;\r\n   private Room hallwaySeven;\r\n\r\n    //constructor\r\n    public ParserEngine(Window window, Database db) {\r\n\r\n        this.db = db;\r\n        this.window = window;\r\n\r\n\r\n        //get a new grid system that will be our map.\r\n        levels = new LevelGridSystem();\r\n        //start the player off at these coordinates in the 2D grid\r\n        playerCords = new PlayerCords(levels, 4,4);\r\n        //creates the entire house with rooms that we have designated already\r\n        createRooms();\r\n        setUpGameTimer();\r\n        objectToList();\r\n\r\n\r\n\r\n        //initialize the HashSet, which implements the Set interface to hold all the nouns and verbs\r\n        //allowed in the game.\r\n        verbs = new HashSet<>();\r\n        nouns = new HashSet<>();\r\n        commandHistory = new ArrayList<>();\r\n\r\n        /*\r\n        Calls respective methods that will populate the hashsets with specific verb and noun string values.\r\n         */\r\n        verbs = getVerbs();\r\n        nouns = getNouns();\r\n\r\n\r\n    }\r\n\r\n\r\n    private void objectToList()\r\n    {\r\n        objectList = new ArrayList<>();\r\n\r\n        objectList.add(cabinet);\r\n        objectList.add(refrigerator);\r\n        objectList.add(sink);\r\n        objectList.add(tub);\r\n        objectList.add(toilet);\r\n        objectList.add(cabinet2);\r\n        objectList.add(bed);\r\n        objectList.add(dresser);\r\n        objectList.add(vanity);\r\n        objectList.add(sofa);\r\n        objectList.add(lamp);\r\n        objectList.add(piano);\r\n        objectList.add(tv);\r\n        objectList.add(table);\r\n    }\r\n\r\n\r\n\r\n    //method to scan and send appropriate messages to the player.\r\n    public void scanText() {\r\n\r\n        StringBuilder sbVerb;\r\n        sbVerb = showVerbs();\r\n\r\n        StringBuilder sbNoun;\r\n        sbNoun = showNouns();\r\n\r\n        //create a new scanner for user input with directions\r\n        Scanner scanner = new Scanner(System.in);\r\n        System.out.println(\"WELCOME TO HOME INTRUSION \" + \"\\n\" +\r\n                \"Enter a verb-and-noun command to begin game. \" + \"\\n\\n\" +\r\n                \"Select any verbs from this list: \" + \"\\n\" + sbVerb.toString() + \"\\n\\n\" +\r\n                \"Select any nouns from this list: \" + \"\\n\" + sbNoun.toString() + \"\\n\\n\" +\r\n                \"You will have 30 seconds to run through the home and grab essential items before the timer runs out and the \" +\r\n                \"intruder has caught you. If a word is misspelled, you have 3 chances to correct and continue the game. Good luck! \");\r\n\r\n        //begin the while loop to loop through every person's turn until the game ends.\r\n        while (true)\r\n        {\r\n            //send message prompting user to type a command.\r\n            System.out.println(\"Enter Command: \");\r\n            //String userInput = scanner.nextLine();\r\n            int attempts = 0;\r\n            boolean isCorrect = false;\r\n\r\n            while (attempts < 3) {\r\n                //grab the user's input and set equal to a variable.\r\n                String userInput = scanner.nextLine();\r\n\r\n                //Add logic here to validate user input, for example:\r\n                if (isValidInput(userInput)) {\r\n                    //Continue with the processing\r\n                    String[] parsedInput = parseInput(userInput);\r\n                    System.out.println(\"Command Executed!\");\r\n                    isCorrect = true;  // Stop after a valid command\r\n                    break;\r\n                }\r\n                else\r\n                {\r\n                    attempts++;\r\n                    System.out.println(\"Invalid command. Try again!\");\r\n                }\r\n            }\r\n\r\n            //if the attempts reach to 3 tries, force user to end the game.\r\n            if (attempts == 3)\r\n            {\r\n                System.out.println(\"You have exhausted 3 attempts! Please enter a valid command next time.\");\r\n                System.out.println(\"Enter Exit to quit the game.\");\r\n            }\r\n\r\n            //get the next input from the user.\r\n            String userInput = scanner.nextLine();\r\n\r\n            //the loop will only break if the user uses the word \"Exit\"\r\n            if (userInput.equalsIgnoreCase(\"exit\"))\r\n            {\r\n                //break out of the loop.\r\n                break;\r\n            }\r\n\r\n            //call my function to parse the userinput.\r\n            parseInput(userInput);\r\n        }\r\n\r\n        //tell user the game is over.\r\n        System.out.println(\"\\n Game Over!\");\r\n        showCommand();\r\n        commandHistory.clear();\r\n        //Close the scanner\r\n        scanner.close();\r\n\r\n    }\r\n\r\n\r\n    /*\r\n    Method checks if the String user input is actually a string or not.\r\n     */\r\n    public Boolean isValidInput(String input)\r\n    {\r\n        //Convert input to lowercase and split by space\r\n        String[] words = input.toLowerCase().split(\" \");\r\n\r\n        //Variables to store verb and noun\r\n        String verb = null;\r\n        String noun = null;\r\n\r\n        //Loop through words and check if they're in the sets\r\n        for (String w : words) {\r\n            if (verbs.contains(w)) {\r\n                verb = w;\r\n            } else if (nouns.contains(w)) {\r\n                noun = w;\r\n            }\r\n        }\r\n\r\n        //Check if both verb and noun were found\r\n        if (verb != null && noun != null) {\r\n            return true;  // Both verb and noun are valid\r\n        } else {\r\n            return false;  // Invalid input\r\n        }\r\n\r\n    }\r\n\r\n\r\n    //Method that parses user input and returns the string array.\r\n    public String[] parseInput(String input) {\r\n\r\n        //First, validate input\r\n        if (!isValidInput(input)) {\r\n            System.out.println(\"Invalid input. Please ensure you use a valid verb and noun.\");\r\n            return new String[]{null, null};  // Return a default array for invalid input\r\n        }\r\n\r\n        //Now that we know input is valid, proceed with parsing\r\n        String[] words = input.toLowerCase().split(\" \");\r\n        String verb = null;\r\n        String noun = null;\r\n\r\n        //Loop through words and assign verb/nouns\r\n        for (String w : words) {\r\n            if (verbs.contains(w)) {\r\n                verb = w;\r\n            } else if (nouns.contains(w)) {\r\n                noun = w;\r\n            }\r\n        }\r\n\r\n        //Add verb and noun to command history\r\n        commandHistory.add(verb);\r\n        commandHistory.add(noun);\r\n\r\n        RoomSearch(noun, verb);\r\n        ObjectSearch(noun, verb);\r\n        //GrabItemCabinet(noun, verb);\r\n        //GrabItemDresser(noun, verb);\r\n        GrabItemTable(noun, verb);\r\n        trackMovement(verb, noun);\r\n        showMap(noun, verb);\r\n        showTime(noun, verb);\r\n        getDB(noun, verb);\r\n        //Return verb and noun as a String array\r\n        return new String[]{verb, noun};\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    /*\r\n    Method to just show the command history once the person exists the game.\r\n     */\r\n    private void showCommand()\r\n    {\r\n        for(int i = 0; i < commandHistory.size(); i += 2)\r\n        {\r\n            String verbValue = commandHistory.get(i);\r\n            String nounValue = commandHistory.get(i + 1);\r\n            System.out.println(\"Verb: \" + verbValue  + \" |\" + \" Noun: \" + nounValue);\r\n        }\r\n    }\r\n\r\n\r\n    //switch case method to keep track of the player's movement throughout the map.\r\n    private void trackMovement(String verb, String noun)\r\n    {\r\n        /*\r\n        if verb equals \"go\" then we need a switch statement for noun for north, south, east, OR west\r\n         */\r\n\r\n        //get the current coordinates\r\n        int currentX = playerCords.getCoordX();\r\n        int currentY = playerCords.getCoordY();\r\n\r\n        int newX = currentX;\r\n        int newY = currentY;\r\n\r\n        switch (noun.toLowerCase()) {\r\n            case \"north\":\r\n                newX--;\r\n                break;\r\n            case \"south\":\r\n                newX++;\r\n                break;\r\n            case \"west\":\r\n                newY--;\r\n                break;\r\n            case \"east\":\r\n                newY++;\r\n                break;\r\n        }\r\n\r\n        //condition to move around the map\r\n        if (levels.isValidRoom(newX, newY) && levels.getRoomToGrid(newX, newY) != null) {\r\n            if (noun.equals(\"west\") || noun.equals(\"east\") || noun.equals(\"north\") || noun.equals(\"south\"))\r\n            {\r\n                playerCords.setCoordX(newX);\r\n                playerCords.setCoordY(newY);\r\n                Room currentRoom = levels.getRoomToGrid(newX, newY);\r\n                System.out.println(\"You moved \" + noun + \" to \" + currentRoom.getName() + \".\");\r\n            }\r\n        }\r\n        else\r\n        {\r\n            System.out.println(\"You can't move \" + noun + \". There's no room there.\");\r\n        }\r\n\r\n    }\r\n\r\n    /*\r\n    Here we are calling one method to actually create all the rooms we have built below.\r\n    Method is called in the constructor.\r\n     */\r\n\r\n\r\n\r\n    //set up the gameTimer to call and start.\r\n    public void setUpGameTimer()\r\n    {\r\n        gameTimer = new GameTimer();\r\n\r\n        gameTimer.start();\r\n    }\r\n\r\n    //if there are any windows.\r\n    public Window getWindow() {\r\n        return window;\r\n    }\r\n\r\n\r\n    //if there are any set windows.\r\n    public void setWindow(Window window) {\r\n        this.window = window;\r\n    }\r\n\r\n\r\n    //get the database.\r\n\r\n\r\n\r\n    public void setDb(Database db) {\r\n        this.db = db;\r\n    }\r\n\r\n\r\n    //all our verbs in the hashset\r\n    public HashSet<String> getVerbs() {\r\n        //declare a new hashset\r\n        verbs = new HashSet<>();\r\n        String[] verbList = {\"take\", \"hide\", \"lock\", \"grab\", \"drop\", \"open\", \"exit\", \"go\", \"look\", \"unlock\", \"turn\", \"search\", \"show\", \"wipe\"};\r\n        verbs.addAll(Arrays.asList(verbList));\r\n        return verbs;\r\n    }\r\n\r\n\r\n    //all the nouns in the hashset.\r\n    public HashSet<String> getNouns() {\r\n        //declare a new hashset\r\n        nouns = new HashSet<>();\r\n        String[] nounList = {\"key\", \"door\", \"room\", \"flashlight\", \"award\", \"upstairs\", \"downstairs\", \"drawer\", \"cabinet\",\r\n        \"couch\", \"curtain\", \"noisemaker\", \"lights\", \"window\", \"fridge\", \"car\", \"sink\", \"desk\", \"bed\", \"stove\", \"shelves\",\r\n        \"bookshelf\", \"table\", \"chair\", \"nightstand\", \"counter\", \"boxes\", \"timer\", \"north\", \"south\", \"east\", \"west\", \"kitchen\",\r\n        \"bedroom\", \"hallway\", \"basement\", \"livingroom\", \"bathroom\", \"refrigerator\", \"map\", \"garage\", \"dresser\", \"vanity\", \"database\"};\r\n        nouns.addAll(Arrays.asList(nounList));\r\n        return nouns;\r\n    }\r\n\r\n\r\n    /*\r\n    Search Method:\r\n    \"search\" - \"noun - room name\"\r\n    go to that builder class caller the roomBuilder\r\n    grab the items in the builder class\r\n\r\n    add the room names in the noun HashSet<>\r\n     */\r\n    public String RoomSearch(String noun, String verb) {\r\n\r\n        String result = \"\";\r\n        int currentX = playerCords.getCoordX();\r\n        int currentY = playerCords.getCoordY();\r\n        \r\n        \r\n        //validation for verb search\r\n        if (verb.equals(\"search\")) {\r\n\r\n            //continue with switch statement depending on which noun or room it is from user input.\r\n            switch(noun){\r\n                case \"kitchen\":\r\n                    if(levels.getRoomToGrid(currentX, currentY) != kitchen)\r\n                    {\r\n                        System.out.println(\"You are not in a kitchen\");\r\n                    }\r\n                    else\r\n                    {\r\n                        System.out.println(levels.getRoomToGrid(playerCords.getCoordX(), playerCords.getCoordY()).searchRoom());\r\n                    }\r\n                    break;\r\n                case \"bedroom\":\r\n                    if(levels.getRoomToGrid(currentX, currentY) != bedroom)\r\n                    {\r\n                        System.out.println(\"You are not in the bedroom\");\r\n                    }\r\n                    else {\r\n                        System.out.println(levels.getRoomToGrid(playerCords.getCoordX(), playerCords.getCoordY()).searchRoom());\r\n                    }\r\n                    break;\r\n                case \"garage\":\r\n                    if(levels.getRoomToGrid(currentX, currentY) != garage)\r\n                    {\r\n                        System.out.println(\"You are not in the garage.\");\r\n                    }\r\n                    else {\r\n                        System.out.println(levels.getRoomToGrid(playerCords.getCoordX(), playerCords.getCoordY()).searchRoom());\r\n                    }\r\n                    break;\r\n                case \"bathroom\":\r\n                    if(levels.getRoomToGrid(currentX, currentY) != bathroom)\r\n//                    if(levels.getRoomToGrid(currentX, currentY) != bathroom && levels.getRoomToGrid(currentX, currentY) != halfbath)\r\n                    {\r\n                        System.out.println(\"You are not in a bathroom!\");\r\n                    }\r\n                    else\r\n                    {\r\n                        System.out.println(levels.getRoomToGrid(playerCords.getCoordX(), playerCords.getCoordY()).searchRoom());\r\n                    }\r\n                    break;\r\n                case \"livingroom\":\r\n                    if(levels.getRoomToGrid(currentX, currentY) != livingRoom)\r\n                    {\r\n                        System.out.println(\"You are not in a livingroom.\");\r\n                    }\r\n                    else {\r\n                        System.out.println(levels.getRoomToGrid(playerCords.getCoordX(), playerCords.getCoordY()).searchRoom());\r\n                    }\r\n                    break;\r\n                case \"hallway\":\r\n                    System.out.println();\r\n                    break;\r\n\r\n            }\r\n\r\n        }\r\n\r\n       return result;\r\n    }\r\n\r\n\r\n    public void ObjectSearch(String noun, String verb) {\r\n\r\n\r\n        if (verb.equalsIgnoreCase(\"search\")) {\r\n            for (RoomObjects obj : objectList) {\r\n                if (noun.equalsIgnoreCase(obj.getName())) {\r\n                    System.out.println(obj.search());\r\n\r\n                    break;\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n\r\n    //search cabinet method, bringing in the proper noun and verb from user input\r\n    //this example is specific for a kitchen cabinet.\r\n//    public String CabinetSearch(String noun, String verb)\r\n//    {\r\n//        String result = \"\";\r\n//\r\n//        //validation for verb search\r\n//        if (verb.equals(\"search\")) {\r\n//            if(noun.equals(\"cabinet\"))\r\n//            {\r\n//                System.out.println(cabinet.search());\r\n//\r\n//            }\r\n//            else if(noun.equals(\"refrigerator\"))\r\n//            {\r\n//                System.out.println(refrigerator.search());\r\n//            }\r\n//        }\r\n//\r\n//        return result;\r\n//    }\r\n\r\n\r\n    public void GrabItemCabinet(String noun, String verb)\r\n    {\r\n        int coordX = playerCords.getCoordX();\r\n        int coordY = playerCords.getCoordY();\r\n\r\n        //ensure that the verb is take\r\n        if(verb.equals(\"take\")) {\r\n            //ensure that the noun is either key or flashlight\r\n            if (noun.equals(\"key\") || noun.equals(\"flashlight\") || noun.equals(\"map\")) {\r\n\r\n                if(levels.getRoomToGrid(coordX, coordY) == kitchen)\r\n                {\r\n\r\n                }\r\n                //ensure that the roomobject acutally has a key or flashlight\r\n\r\n                if (cabinet.obtainCheck().equals(true)) {\r\n                    //db has been updated for that particular player\r\n                    db.updateQuantity(db, 1, noun);\r\n                    //remove item from roomobject\r\n                    System.out.println(cabinet.removeItem(noun));\r\n\r\n                } else {\r\n                    System.out.println(\"Cabinet does not have a flashlight and/or key.\");\r\n                }\r\n            } else {\r\n                System.out.println(\"You have used the wrong noun, please type either key or flashlight.\");\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    //update query to get the item from a table roomobject\r\n    public void GrabItemTable(String noun, String verb)\r\n    {\r\n        int coordX = playerCords.getCoordX();\r\n        int coordY = playerCords.getCoordY();\r\n        //ensure that the verb\r\n        if(verb.equals(\"take\")) {\r\n\r\n\r\n            //ensure that the noun is either key or flashlight\r\n            if (noun.equals(\"key\") || noun.equals(\"flashlight\") || noun.equals(\"map\")) {\r\n\r\n                //ensure that the roomobject acutally has a key or flashlight\r\n                if (table.obtainCheck().equals(true) && levels.getRoomToGrid(coordX, coordY) == livingRoom) {\r\n                    //db has been updated for that particular player\r\n                    db.updateQuantity(db, 1, noun);\r\n                    //remove item from roomobject\r\n                    System.out.println(table.removeItem(noun));\r\n\r\n                }\r\n\r\n                if(cabinet.obtainCheck().equals(true) && levels.getRoomToGrid(coordX, coordY) == kitchen) {\r\n                    db.updateQuantity(db, 1, noun);\r\n                    System.out.println(cabinet.removeItem(noun));\r\n                }\r\n                else if(dresser.obtainCheck().equals(true) && levels.getRoomToGrid(coordX, coordY) == bedroom)\r\n                {\r\n                    db.updateQuantity(db, 1, noun);\r\n                    System.out.println(dresser.removeItem(noun));\r\n                }\r\n                else {\r\n                    System.out.println(\"There is nothing to take.\");\r\n                }\r\n            } else {\r\n                System.out.println(\"You have used the wrong noun, please type either key or flashlight.\");\r\n            }\r\n        }\r\n    }\r\n\r\n    //method to get an item from a desser roomobject\r\n    public void GrabItemDresser(String noun, String verb)\r\n    {\r\n        //ensure that the verb\r\n        if(verb.equals(\"take\")) {\r\n            //ensure that the noun is either key or flashlight\r\n            if (noun.equals(\"key\") || noun.equals(\"flashlight\") || noun.equals(\"map\")) {\r\n                //ensure that the roomobject acutally has a key or flashlight\r\n                if (dresser.obtainCheck().equals(true)) {\r\n                    //db has been updated for that particular player\r\n                    db.updateQuantity(db, 1, noun);\r\n                    //remove item from roomobject\r\n                    System.out.println(dresser.removeItem(noun));\r\n\r\n                } else {\r\n                    System.out.println(\"Dresser does not have a flashlight and/or key.\");\r\n                }\r\n            } else {\r\n                System.out.println(\"You have used the wrong noun, please type either key or flashlight.\");\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    //display the 2D grid map for the user when they type show map.\r\n    public void showMap(String noun, String verb)\r\n    {\r\n        if(verb.equals(\"show\"))\r\n        {\r\n            if(noun.equals(\"map\"))\r\n            {\r\n                levels.printMap(playerCords);\r\n            }\r\n        }\r\n    }\r\n\r\n    //show timer\r\n    public void showTime(String noun, String verb)\r\n    {\r\n        if(verb.equals(\"show\"))\r\n        {\r\n            if(noun.equals(\"timer\"))\r\n            {\r\n                System.out.println(gameTimer.getSeconds());\r\n            }\r\n        }\r\n    }\r\n\r\n    public void getDB(String noun, String verb)\r\n    {\r\n        if(verb.equals(\"show\"))\r\n        {\r\n            if(noun.equals(\"database\"))\r\n            {\r\n                db.getAllQuantities(db);\r\n            }\r\n        }\r\n        if(verb.equals(\"wipe\"))\r\n        {\r\n            if(noun.equals(\"database\"))\r\n            {\r\n                db.resetAllQuantities(db);\r\n            }\r\n        }\r\n    }\r\n\r\n    //method to display all the verbs in an ArrayList. Method is called in the greeting and directions\r\n    //to show player what verbs they may use.\r\n    public StringBuilder showVerbs()\r\n    {\r\n        StringBuilder sb = new StringBuilder();\r\n        HashSet<String> VERB = getVerbs();\r\n        ArrayList<String> VERBArray = new ArrayList<>(VERB);\r\n\r\n        for(int i = 0; i < VERBArray.size(); i++)\r\n        {\r\n            if (i == VERBArray.size() - 1)\r\n            {\r\n                sb.append(VERBArray.get(i));\r\n            }\r\n            else\r\n            {\r\n                sb.append(VERBArray.get(i)).append(\", \");\r\n            }\r\n        }\r\n\r\n        return sb;\r\n\r\n    }\r\n\r\n\r\n    //displays all the nouns the user can use at the beginning of the game.\r\n    public StringBuilder showNouns()\r\n    {\r\n        StringBuilder sb = new StringBuilder();\r\n        HashSet<String> NOUN = getNouns();\r\n        ArrayList<String> NOUNArray = new ArrayList<>(NOUN);\r\n\r\n        for(int i = 0; i < NOUNArray.size(); i++)\r\n        {\r\n            if (i == NOUNArray.size() - 1)\r\n            {\r\n                sb.append(NOUNArray.get(i));\r\n            }\r\n            else\r\n            {\r\n                sb.append(NOUNArray.get(i)).append(\", \");\r\n            }\r\n        }\r\n\r\n        return sb;\r\n    }\r\n\r\n    public void createRooms()\r\n    {\r\n        createHallways();\r\n        createBathrooms();\r\n        createGarage();\r\n        createKitchens();\r\n        createLivingRooms();\r\n        createBedrooms();\r\n\r\n    }\r\n\r\n\r\n    /*\r\n    Method to create all the hallways and lay them in the right coordinates on the map.\r\n     */\r\n    public void createHallways()\r\n    {\r\n        hallwayOne = new Room(\"Hallway\");\r\n        hallwayTwo = new Room(\"Hallway\");\r\n        hallwayThree = new Room(\"Hallway\");\r\n        hallwayFour = new Room(\"Hallway\");\r\n        hallwayFive = new Room(\"Hallway\");\r\n        hallwaySix = new Room(\"Hallway\");\r\n        hallwaySeven = new Room(\"Hallway\");\r\n\r\n\r\n        hallwayOne = new RoomBuilder(\"Hallway\")\r\n                .setLightsOn(true)\r\n                .build();\r\n        levels.setRoomToGrid(7,4, hallwayOne);\r\n\r\n        hallwayTwo = new RoomBuilder(\"Hallway\")\r\n                .setLightsOn(true)\r\n                .build();\r\n        levels.setRoomToGrid(6,4, hallwayTwo);\r\n\r\n        hallwayThree = new RoomBuilder(\"Hallway\")\r\n                .setLightsOn(true)\r\n                .build();\r\n        levels.setRoomToGrid(5,4, hallwayThree);\r\n\r\n        hallwayFour = new RoomBuilder(\"Hallway\")\r\n                .setLightsOn(true)\r\n                .build();\r\n        levels.setRoomToGrid(4,4, hallwayFour);\r\n\r\n        hallwayFive = new RoomBuilder(\"Hallway\")\r\n                .setLightsOn(true)\r\n                .build();\r\n        levels.setRoomToGrid(3,4, hallwayFive);\r\n\r\n        hallwaySix = new RoomBuilder(\"Hallway\")\r\n                .setLightsOn(true)\r\n                .build();\r\n        levels.setRoomToGrid(3,5, hallwaySix);\r\n\r\n        hallwaySeven = new RoomBuilder(\"Hallway\")\r\n                .setLightsOn(true)\r\n                .build();\r\n        levels.setRoomToGrid(3,3, hallwaySeven);\r\n\r\n\r\n    }\r\n\r\n\r\n    /*\r\n    Create the kitchen with the following objects of choice.\r\n    */\r\n    public void createKitchens()\r\n    {\r\n        String item = \"key\";  // The item to update (\"Key\")\r\n        Item key = new Item(item);\r\n\r\n        kitchen = new Room(\"kitchen\");\r\n        cabinet = new RoomObjects(\"Cabinet\");\r\n        refrigerator = new RoomObjects(\"Refrigerator\");\r\n        cabinet.addItem(key);\r\n\r\n        //this is what needs to be in the search method parser engine\r\n        kitchen = new RoomBuilder(\"Kitchen\")\r\n                .setLightsOn(true)\r\n                .addObject(cabinet)\r\n                .addObject(refrigerator)\r\n                .build();\r\n\r\n        //set the desired coordinates for kitchen\r\n        levels.setRoomToGrid(6, 3, kitchen);\r\n//        } else {\r\n//            // Log a message if the quantity update fails\r\n//            System.out.println(\"Failed to update quantity for item: \" + item);\r\n//        }\r\n    }\r\n\r\n\r\n    /*\r\n    Create the livingroom with the following objects of choice.\r\n    */\r\n    public void createLivingRooms() {\r\n\r\n        // The item to update (\"Map\")\r\n\r\n\r\n\r\n        // Initialize the living room and its objects\r\n        livingRoom = new Room(\"livingroom\");\r\n        sofa = new RoomObjects(\"Sofa\");\r\n        tv = new RoomObjects(\"TV\");\r\n        lamp = new RoomObjects(\"Lamp\");\r\n        piano = new RoomObjects(\"Piano\");\r\n        table = new RoomObjects(\"Table\");\r\n\r\n        String item = \"map\";\r\n        // Create a new Item instance with the updated quantity\r\n        Item map = new Item(item);\r\n        // Add the item to the table\r\n        table.addItem(map);\r\n\r\n        // Build the living room with objects\r\n        livingRoom = new RoomBuilder(\"livingroom\")\r\n                .setLightsOn(true)\r\n                .addObject(sofa)\r\n                .addObject(tv)\r\n                .addObject(lamp)\r\n                .addObject(piano)\r\n                .addObject(table)\r\n                .build();\r\n\r\n        // Set the living room at the desired grid coordinates\r\n        levels.setRoomToGrid(2, 5, livingRoom);\r\n    }\r\n\r\n\r\n    /*\r\n    Create the garage with the following objects of choice.\r\n    */\r\n    public void createGarage()\r\n    {\r\n\r\n        String item = \"Key\";  // The item to update (\"Key\")\r\n        // Update the quantity of the player's item (add 1 item)\r\n        //reads the command of \"Take Key\" -> update the db\r\n\r\n\r\n        // Create a new Item instance with the updated quantity\r\n        Item key = new Item(item);\r\n        // Add the item to the mower\r\n        //mower.addItem(key);\r\n\r\n        // garage = new Room(\"garage\");\r\n        car = new RoomObjects(\"car\");\r\n        mower = new RoomObjects(\"mower\");\r\n\r\n\r\n        garage = new RoomBuilder(\"Garage\")\r\n                .setLightsOn(true)\r\n                .addObject(car)\r\n                .addObject(mower)\r\n                .build();\r\n\r\n        //set the desired coordinates for garage\r\n        levels.setRoomToGrid(7, 5, garage);\r\n\r\n    }\r\n\r\n\r\n    /*\r\n    Create the bedroom with the following objects of choice.\r\n    */\r\n    public void createBedrooms()\r\n    {\r\n\r\n        // Update the quantity of the player's item (add 1 item)\r\n        bedroom = new Room(\"bedroom\");\r\n        bed = new RoomObjects(\"Bed\");\r\n        dresser = new RoomObjects(\"Dresser\");\r\n        vanity = new RoomObjects(\"Vanity\");\r\n\r\n        // Create a new Item instance with the updated quantity\r\n        String item = \"Flashlight\";  // The item to update (\"Flashlight\")\r\n        Item flashlight = new Item(item);\r\n        // Add the item to the table\r\n        dresser.addItem(flashlight);\r\n\r\n        bedroom = new RoomBuilder(\"Bedroom\")\r\n                .setLightsOn(true)\r\n                .addObject(bed)\r\n                .addObject(dresser)\r\n                .addObject(vanity)\r\n                .build();\r\n\r\n        //set the desired coordinates for bedroom\r\n        levels.setRoomToGrid(3,2, bedroom);\r\n\r\n    }\r\n\r\n    /*\r\n    Create the bathroom with the following objects of choice.\r\n    */\r\n    public void createBathrooms()\r\n    {\r\n\r\n        bathroom = new Room(\"bathroom\");\r\n        cabinet2 = new RoomObjects(\"Bathroom Cabinet\");\r\n        sink = new RoomObjects(\"Sink\");\r\n        tub = new RoomObjects(\"Tub\");\r\n        toilet = new RoomObjects(\"Toilet\");\r\n\r\n        bathroom = new RoomBuilder(\"Bathroom\")\r\n                .setLightsOn(true)\r\n                .addObject(cabinet2)\r\n                .addObject(sink)\r\n                .addObject(tub)\r\n                .addObject(toilet)\r\n                .build();\r\n\r\n        //set the desired coordinates for bathroom\r\n        levels.setRoomToGrid(5,5, bathroom);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/controller/ParserEngine.java b/src/controller/ParserEngine.java
--- a/src/controller/ParserEngine.java	(revision 83e667f0cf2ac4ec76e83d353f1ac3c7ff8e8631)
+++ b/src/controller/ParserEngine.java	(date 1734481523379)
@@ -545,46 +545,86 @@
 
 
     //update query to get the item from a table roomobject
-    public void GrabItemTable(String noun, String verb)
+//    public void GrabItemTable(String noun, String verb) {
+//        int coordX = playerCords.getCoordX();
+//        int coordY = playerCords.getCoordY();
+//
+//        // Ensure the verb is "take"
+//        if (verb.equalsIgnoreCase("take")) {
+//
+//            // Ensure the noun is valid (key, flashlight, or map)
+//            if (noun.equalsIgnoreCase("key") || noun.equalsIgnoreCase("flashlight") || noun.equalsIgnoreCase("map")) {
+//
+//                boolean itemTaken = false;
+//
+//                // Check the table in the living room
+//                if (levels.getRoomToGrid(coordX, coordY) == livingRoom && table.obtainCheck()) {
+//                    String result = table.removeItem(noun); // Remove item from table
+//                    if (!result.contains("There is no")) {
+//                        db.updateQuantity(db, 1, noun); // Update database
+//                        System.out.println(result); // Success message
+//                        itemTaken = true;
+//                    }
+//                }
+//
+//                // Check the cabinet in the kitchen
+//                else if (levels.getRoomToGrid(coordX, coordY) == kitchen && cabinet.obtainCheck()) {
+//                    String result = cabinet.removeItem(noun);
+//                    if (!result.contains("There is no")) {
+//                        db.updateQuantity(db, 1, noun);
+//                        System.out.println(result);
+//                        itemTaken = true;
+//                    }
+//                }
+//
+//                // Check the dresser in the bedroom
+//                else if (levels.getRoomToGrid(coordX, coordY) == bedroom && dresser.obtainCheck()) {
+//                    String result = dresser.removeItem(noun);
+//                    if (!result.contains("There is no")) {
+//                        db.updateQuantity(db, 1, noun);
+//                        System.out.println(result);
+//                        itemTaken = true;
+//                    }
+//                }
+//
+//                // Handle if no item was taken
+//                if (!itemTaken) {
+//                    System.out.println("There is nothing to take here.");
+//                }
+//
+//            } else {
+//                System.out.println("Invalid noun. Please type 'key', 'flashlight', or 'map'.");
+//            }
+//        } else {
+//            System.out.println("Invalid verb. Use 'take' to pick up items.");
+//        }
+//    }
+//
+//    //method to get an item from a desser roomobject
+    public void GrabItemDresser(String noun, String verb)
     {
-        int coordX = playerCords.getCoordX();
-        int coordY = playerCords.getCoordY();
         //ensure that the verb
         if(verb.equals("take")) {
-
-
             //ensure that the noun is either key or flashlight
             if (noun.equals("key") || noun.equals("flashlight") || noun.equals("map")) {
-
                 //ensure that the roomobject acutally has a key or flashlight
-                if (table.obtainCheck().equals(true) && levels.getRoomToGrid(coordX, coordY) == livingRoom) {
+                if (dresser.obtainCheck().equals(true)) {
                     //db has been updated for that particular player
                     db.updateQuantity(db, 1, noun);
                     //remove item from roomobject
-                    System.out.println(table.removeItem(noun));
-
-                }
-
-                if(cabinet.obtainCheck().equals(true) && levels.getRoomToGrid(coordX, coordY) == kitchen) {
-                    db.updateQuantity(db, 1, noun);
-                    System.out.println(cabinet.removeItem(noun));
-                }
-                else if(dresser.obtainCheck().equals(true) && levels.getRoomToGrid(coordX, coordY) == bedroom)
-                {
-                    db.updateQuantity(db, 1, noun);
                     System.out.println(dresser.removeItem(noun));
-                }
-                else {
-                    System.out.println("There is nothing to take.");
+
+                } else {
+                    System.out.println("Dresser does not have a flashlight and/or key.");
                 }
             } else {
                 System.out.println("You have used the wrong noun, please type either key or flashlight.");
             }
         }
+
     }
 
-    //method to get an item from a desser roomobject
-    public void GrabItemDresser(String noun, String verb)
+    public void GrabItemTable(String noun, String verb)
     {
         //ensure that the verb
         if(verb.equals("take")) {
@@ -607,8 +647,6 @@
 
     }
 
-
-
     //display the 2D grid map for the user when they type show map.
     public void showMap(String noun, String verb)
     {
Index: src/Model/levels/room/RoomObjects.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Model.levels.room;\r\n\r\nimport Model.levels.Item;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n//the class that will implement our RoomObject interface.\r\npublic class RoomObjects implements RoomObject {\r\n\r\n    private String name;\r\n    private List<Item> items;\r\n    private Item currentItem;\r\n\r\n    //constructor\r\n    public RoomObjects(String name)\r\n    {\r\n        this.items = new ArrayList<>();\r\n        this.name = name;\r\n    }\r\n\r\n    //search for the items in the room or inside a room object.\r\n    @Override\r\n    public String search() {\r\n        if(items.isEmpty())\r\n        {\r\n            return \"The \" + name + \" is empty.\";\r\n        }\r\n\r\n        StringBuilder result = new StringBuilder(\"Inside the \" + name + \", you find: \");\r\n\r\n        for(Item item : items)\r\n        {\r\n            result.append(item.getName() + \"\\n\");\r\n        }\r\n        return result.toString();\r\n    }\r\n\r\n    @Override\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    @Override\r\n    public void addItem(Item item) {\r\n        items.add(item);\r\n    }\r\n\r\n    //allows us to remove an item from the ArrayList when player takes that item.\r\n    @Override\r\n    public String removeItem(String itemName) {\r\n        for(Item item : items)\r\n        {\r\n            if(item.getName().equalsIgnoreCase(itemName))\r\n            {\r\n                items.remove(item);\r\n                return \"You took the \" + itemName + \" from the \" + name + \".\";\r\n            }\r\n\r\n        }\r\n        return \"There is no \" + itemName + \" in the \" + name + \".\";\r\n    }\r\n\r\n    @Override\r\n    public List<Item> getItems() {\r\n        return items;\r\n    }\r\n\r\n    @Override\r\n    public char getSymbol() {\r\n        return name.charAt(0);\r\n    }\r\n\r\n\r\n    @Override\r\n    public Boolean obtainCheck() {\r\n        for (Item item : items) {\r\n            if (item.getName().equalsIgnoreCase(\"key\") ||\r\n                    item.getName().equalsIgnoreCase(\"flashlight\") ||\r\n                    item.getName().equalsIgnoreCase(\"map\")) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Model/levels/room/RoomObjects.java b/src/Model/levels/room/RoomObjects.java
--- a/src/Model/levels/room/RoomObjects.java	(revision 83e667f0cf2ac4ec76e83d353f1ac3c7ff8e8631)
+++ b/src/Model/levels/room/RoomObjects.java	(date 1734481381092)
@@ -2,6 +2,7 @@
 
 import Model.levels.Item;
 import java.util.ArrayList;
+import java.util.Iterator;
 import java.util.List;
 
 //the class that will implement our RoomObject interface.
@@ -48,15 +49,18 @@
     //allows us to remove an item from the ArrayList when player takes that item.
     @Override
     public String removeItem(String itemName) {
-        for(Item item : items)
-        {
-            if(item.getName().equalsIgnoreCase(itemName))
-            {
-                items.remove(item);
+        // Use an iterator to safely remove items during iteration
+        Iterator<Item> iterator = items.iterator();
+
+        while (iterator.hasNext()) {
+            Item item = iterator.next();
+            if (item.getName().equalsIgnoreCase(itemName)) {
+                iterator.remove(); // Safely remove the item
                 return "You took the " + itemName + " from the " + name + ".";
             }
-
         }
+
+        // If the item was not found
         return "There is no " + itemName + " in the " + name + ".";
     }
 
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"dcbe192d-e3e1-431d-81f5-a51ad6d66bca\" name=\"Changes\" comment=\"big update\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/Model/database/Database.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/Model/database/Database.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/Model/gameTimer/GameTimer.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/Model/gameTimer/GameTimer.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/Resources/FinalJava1.db\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/Resources/FinalJava1.db\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/controller/ParserEngine.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/controller/ParserEngine.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Interface\" />\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"master\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;Randall442&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">{\r\n  &quot;selectedUrlAndAccountId&quot;: {\r\n    &quot;url&quot;: &quot;https://github.com/alauth22/JavaFinal.git&quot;,\r\n    &quot;accountId&quot;: &quot;525ed17e-c4cb-4d8e-8e1a-76a31f6b28ac&quot;\r\n  }\r\n}</component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 2\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2oLyYtKiThOQWtgf2Xsi1uEuxjn\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"Application.LoggingExample.executor\": \"Run\",\r\n    \"Application.Main.executor\": \"Run\",\r\n    \"Application.Testconnection.executor\": \"Run\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"RunOnceActivity.git.unshallow\": \"true\",\r\n    \"SHARE_PROJECT_CONFIGURATION_FILES\": \"true\",\r\n    \"git-widget-placeholder\": \"master\",\r\n    \"kotlin-language-version-configured\": \"true\",\r\n    \"last_opened_file_path\": \"C:/Users/Randy/IdeaProjects/JavaFinal2/src/Resources/log4j-core-2.17.2.jar\",\r\n    \"project.structure.last.edited\": \"Modules\",\r\n    \"project.structure.proportion\": \"0.15\",\r\n    \"project.structure.side.proportion\": \"0.2\"\r\n  }\r\n}]]></component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"dcbe192d-e3e1-431d-81f5-a51ad6d66bca\" name=\"Changes\" comment=\"\" />\r\n      <created>1730663201018</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1730663201018</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Commit to LoggingExample.java and write to Flat File - Mariana\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1730848770233</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1730848770233</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Revert change\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1730853636491</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1730853636491</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Revert change\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1732477357679</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1732477357679</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"Revert change\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1732477374864</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1732477374864</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"Revert change\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1733160047823</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1733160047823</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"Revert change\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1733160089727</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1733160089727</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"Revert change\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1733160226150</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1733160226150</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"Revert change\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1733160323195</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1733160323195</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"Revert change\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1733160366912</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1733160366912</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"Validation work in ParserEngine and Added Sound class\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1733683479570</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1733683479571</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"Validation work in ParserEngine and Added Sound class\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1733683488515</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1733683488515</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"more rooms added to map with objects.\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1733967105627</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1733967105627</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"more rooms added to map with objects. -amelia\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1733967114881</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1733967114881</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"updates for searching objects and removing from items list and database. -amelia\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1734300457488</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1734300457488</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"updates for searching objects and removing from items list and database. -amelia\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1734300463336</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1734300463336</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00016\" summary=\"added 2 more methods to get items from RoomObject items\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1734387712364</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1734387712364</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00017\" summary=\"added 2 more methods to get items from RoomObject items\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1734387720133</created>\r\n      <option name=\"number\" value=\"00017\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1734387720133</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00018\" summary=\"removed UpdateQuantity throughout ParserEngine except for three item methods\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1734388249360</created>\r\n      <option name=\"number\" value=\"00018\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1734388249360</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00019\" summary=\"removed UpdateQuantity throughout ParserEngine except for three item methods\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1734388254229</created>\r\n      <option name=\"number\" value=\"00019\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1734388254229</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00020\" summary=\"removed UpdateQuantity throughout ParserEngine except for three item methods\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1734388309628</created>\r\n      <option name=\"number\" value=\"00020\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00020\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1734388309628</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00021\" summary=\"removed UpdateQuantity throughout ParserEngine except for three item methods\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1734388316520</created>\r\n      <option name=\"number\" value=\"00021\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00021\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1734388316520</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00022\" summary=\"more error handling corrections\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1734390008225</created>\r\n      <option name=\"number\" value=\"00022\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00022\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1734390008225</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00023\" summary=\"more error handling corrections\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1734390014227</created>\r\n      <option name=\"number\" value=\"00023\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00023\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1734390014227</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00024\" summary=\"practice\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1734476008362</created>\r\n      <option name=\"number\" value=\"00024\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00024\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1734476008362</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00025\" summary=\"practice\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1734476031637</created>\r\n      <option name=\"number\" value=\"00025\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00025\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1734476031637</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00026\" summary=\"big update\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1734478708816</created>\r\n      <option name=\"number\" value=\"00026\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00026\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1734478708816</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00027\" summary=\"big update\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1734478718599</created>\r\n      <option name=\"number\" value=\"00027\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00027\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1734478718599</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"28\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"Commit to LoggingExample.java and write to Flat File - Mariana\" />\r\n    <MESSAGE value=\"Revert change\" />\r\n    <MESSAGE value=\"Validation work in ParserEngine and Added Sound class\" />\r\n    <MESSAGE value=\"more rooms added to map with objects.\" />\r\n    <MESSAGE value=\"more rooms added to map with objects. -amelia\" />\r\n    <MESSAGE value=\"updates for searching objects and removing from items list and database. -amelia\" />\r\n    <MESSAGE value=\"added 2 more methods to get items from RoomObject items\" />\r\n    <MESSAGE value=\"removed UpdateQuantity throughout ParserEngine except for three item methods\" />\r\n    <MESSAGE value=\"more error handling corrections\" />\r\n    <MESSAGE value=\"practice\" />\r\n    <MESSAGE value=\"big update\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"big update\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 83e667f0cf2ac4ec76e83d353f1ac3c7ff8e8631)
+++ b/.idea/workspace.xml	(date 1734481304407)
@@ -4,11 +4,9 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="dcbe192d-e3e1-431d-81f5-a51ad6d66bca" name="Changes" comment="big update">
+    <list default="true" id="dcbe192d-e3e1-431d-81f5-a51ad6d66bca" name="Changes" comment="big updatenumber 2">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/Model/database/Database.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Model/database/Database.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/Model/gameTimer/GameTimer.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Model/gameTimer/GameTimer.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/Resources/FinalJava1.db" beforeDir="false" afterPath="$PROJECT_DIR$/src/Resources/FinalJava1.db" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/Model/levels/room/RoomObjects.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Model/levels/room/RoomObjects.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/controller/ParserEngine.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/controller/ParserEngine.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
@@ -294,7 +292,23 @@
       <option name="project" value="LOCAL" />
       <updated>1734478718599</updated>
     </task>
-    <option name="localTasksCounter" value="28" />
+    <task id="LOCAL-00028" summary="big updatenumber 2">
+      <option name="closed" value="true" />
+      <created>1734480661149</created>
+      <option name="number" value="00028" />
+      <option name="presentableId" value="LOCAL-00028" />
+      <option name="project" value="LOCAL" />
+      <updated>1734480661149</updated>
+    </task>
+    <task id="LOCAL-00029" summary="big updatenumber 2">
+      <option name="closed" value="true" />
+      <created>1734480667242</created>
+      <option name="number" value="00029" />
+      <option name="presentableId" value="LOCAL-00029" />
+      <option name="project" value="LOCAL" />
+      <updated>1734480667242</updated>
+    </task>
+    <option name="localTasksCounter" value="30" />
     <servers />
   </component>
   <component name="VcsManagerConfiguration">
@@ -309,6 +323,7 @@
     <MESSAGE value="more error handling corrections" />
     <MESSAGE value="practice" />
     <MESSAGE value="big update" />
-    <option name="LAST_COMMIT_MESSAGE" value="big update" />
+    <MESSAGE value="big updatenumber 2" />
+    <option name="LAST_COMMIT_MESSAGE" value="big updatenumber 2" />
   </component>
 </project>
\ No newline at end of file
