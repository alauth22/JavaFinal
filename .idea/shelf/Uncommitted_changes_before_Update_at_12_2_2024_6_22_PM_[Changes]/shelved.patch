Index: src/Main/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Main;\r\n\r\npublic class Main {\r\n\r\n    public static void main(String[] args) {\r\n        // TODO Auto-generated method stub\r\n\r\n            try {\r\n                //grab the one instance of the appClient\r\n                AppClient test1 = AppClient.INSTANCE;\r\n                test1.getParserEngine().scanText();\r\n\r\n            }\r\n            catch (ArithmeticException e) {\r\n                //first handle the specific exception\r\n                System.out.println(\"Error: Cannot divide by zero.\");\r\n\r\n            }\r\n            catch (Exception e) {\r\n                //now handle any other exceptions like a catch all\r\n                System.out.println(\"An unexpected error has occurred: \" + e.getMessage());\r\n\r\n            }\r\n            finally {\r\n                //this block of code will always execute\r\n                System.out.println(\"Clean up any further actions.\");\r\n            }\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Main/Main.java b/src/Main/Main.java
--- a/src/Main/Main.java	(revision 7d4a5fe78879f79c000acc1191f8449f135d1a26)
+++ b/src/Main/Main.java	(date 1732478163035)
@@ -27,7 +27,5 @@
             }
 
         }
-
-
     }
 
Index: src/Model/Database.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Model;\r\n\r\nimport java.sql.Connection;\r\nimport java.sql.DriverManager;\r\nimport java.sql.SQLException;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.*;\r\n\r\npublic class Database {\r\n    private Connection databaseLink;\r\n\r\n    // Method to establish a connection to the SQLite database\r\n    public Connection getConnection() throws SQLException\r\n    {\r\n        Connection conn = null;\r\n        try\r\n        {\r\n            conn = DriverManager.getConnection(\"jdbc:sqlite:src/Resources/FinalJava.db\");\r\n            System.out.println(\"Connection Established\");\r\n        }\r\n        catch (SQLException e)\r\n        {\r\n            System.out.println(e.getMessage());\r\n            throw e;\r\n        }\r\n\r\n        return conn;\r\n    }\r\n    //Project 4.5 assignment\r\n    // Method to add an item to the database\r\n    public void addItem(Item item) throws SQLException {\r\n        String query = \"INSERT INTO items (id, name, quantity) VALUES (?, ?, ?)\";\r\n        try (Connection conn = getConnection();\r\n             PreparedStatement pstmt = conn.prepareStatement(query)) {\r\n            pstmt.setInt(1, item.getId());\r\n            pstmt.setString(2, item.getName());\r\n            pstmt.setInt(3, item.getQuantity());\r\n            pstmt.executeUpdate();\r\n            System.out.println(\"Item added: \" + item);\r\n        }\r\n    }\r\n\r\n    // Method to delete an item from the database\r\n    public void deleteItem(int id) throws SQLException {\r\n        String query = \"DELETE FROM items WHERE id = ?\";\r\n        try (Connection conn = getConnection();\r\n             PreparedStatement pstmt = conn.prepareStatement(query)) {\r\n            pstmt.setInt(1, id);\r\n            pstmt.executeUpdate();\r\n            System.out.println(\"Item deleted with ID: \" + id);\r\n        }\r\n    }\r\n\r\n    // Method to update an item's quantity in the database\r\n    public void updateItemQuantity(int id, int newQuantity) throws SQLException {\r\n        String query = \"UPDATE items SET quantity = ? WHERE id = ?\";\r\n        try (Connection conn = getConnection();\r\n             PreparedStatement pstmt = conn.prepareStatement(query)) {\r\n            pstmt.setInt(1, newQuantity);\r\n            pstmt.setInt(2, id);\r\n            pstmt.executeUpdate();\r\n            System.out.println(\"Item updated: ID=\" + id + \", New Quantity=\" + newQuantity);\r\n        }\r\n    }\r\n\r\n    // Method to retrieve an item by its ID\r\n    public Item getItemById(int id) throws SQLException {\r\n        String query = \"SELECT * FROM items WHERE id = ?\";\r\n        try (Connection conn = getConnection(); // Use getConnection() to get the connection\r\n             PreparedStatement pstmt = conn.prepareStatement(query)) {\r\n            pstmt.setInt(1, id);  // Set the item ID in the query\r\n            ResultSet rs = pstmt.executeQuery(); // Execute the query\r\n\r\n            if (rs.next()) {\r\n                int itemId = rs.getInt(\"id\");\r\n                String itemName = rs.getString(\"name\");\r\n                int itemQuantity = rs.getInt(\"quantity\");\r\n                return new Item(itemId, itemName, itemQuantity); // Return the Item object\r\n            } else {\r\n                System.out.println(\"Item not found with ID: \" + id);\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n//testingg\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Model/Database.java b/src/Model/Database.java
--- a/src/Model/Database.java	(revision 7d4a5fe78879f79c000acc1191f8449f135d1a26)
+++ b/src/Model/Database.java	(date 1732593768103)
@@ -82,5 +82,4 @@
             }
         }
     }
-//testingg
 }
\ No newline at end of file
Index: src/controller/ParserEngine.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package controller;\r\nimport Model.Database;\r\nimport Model.PlayerCords;\r\nimport View.Window;\r\nimport Model.gameTimer.GameTimer;\r\nimport Model.gameTimer.SurvivalTimer;\r\nimport Model.levels.LevelGridSystem;\r\nimport Model.levels.bathroom.Bath;\r\nimport Model.levels.bathroom.BathBuilder;\r\nimport Model.levels.garage.Garage;\r\nimport Model.levels.garage.GarageBuilder;\r\nimport Model.levels.hallway.Hallway;\r\nimport Model.levels.hallway.HallwayBuilder;\r\nimport Model.levels.kitchen.Kitchen;\r\nimport Model.levels.kitchen.KitchenBuilder;\r\nimport Model.levels.livingroom.Living;\r\nimport Model.levels.livingroom.LivingBuilder;\r\n\r\nimport java.util.*;\r\n\r\npublic class ParserEngine {\r\n    //Scanner Parser\r\n\r\n    //create private sets for nouns and verbs so that they remain unique.\r\n    //could try an array or a dictionary, but I don't care about order.\r\n    private Set<String> verbs;\r\n    private Set<String> nouns;\r\n    private Window window;\r\n    private Database db;\r\n    private ArrayList<String> commandHistory;\r\n    private LevelGridSystem levelGridSystem;\r\n\r\n    //GAME ENGINE STUFF\r\n    //private variables to hold the parameter values\r\n    //private Window window;\r\n    //private Database db;\r\n    private GameTimer gameTimer;\r\n    private SurvivalTimer survivalTimer;\r\n    private LevelGridSystem levels;\r\n    private PlayerCords playerCords;\r\n\r\n    //constructor\r\n    public ParserEngine(Window window, Database db, PlayerCords playerCords) {\r\n\r\n        this.db = db;\r\n        this.window = window;\r\n        this.playerCords = playerCords;\r\n\r\n\r\n        //GAME ENGINE\r\n        //this.setDb(db);\r\n        //this.setWindow(window);\r\n        levels = new LevelGridSystem();\r\n        //setUpGameTimer();\r\n        //setUpSurvivalTimer();\r\n        createRooms();\r\n\r\n        //initialize the HashSet, which implements the Set interface\r\n        verbs = new HashSet<>();\r\n        nouns = new HashSet<>();\r\n        commandHistory = new ArrayList<>();\r\n\r\n        //add to verbs set.\r\n        verbs.add(\"take\"); //keep\r\n        verbs.add(\"hide\"); //keep\r\n        verbs.add(\"lock\"); //keep\r\n        verbs.add(\"grab\"); //keep\r\n        verbs.add(\"drop\"); //keep\r\n        verbs.add(\"open\"); //keep\r\n        verbs.add(\"exit\"); //keep\r\n        verbs.add(\"go\"); //keep\r\n        verbs.add(\"look\"); //keep\r\n        verbs.add(\"unlock\"); //keep\r\n        verbs.add(\"turn\");\r\n//        verbs.add(\"turn on\"); //keep\r\n//        verbs.add(\"turn off\");\r\n\r\n        //add to nouns set.\r\n        nouns.add(\"key\");\r\n        nouns.add(\"door\");\r\n        nouns.add(\"room\");\r\n        nouns.add(\"flashlight\");\r\n        nouns.add(\"award\");\r\n        nouns.add(\"upstairs\");\r\n        nouns.add(\"downstairs\");\r\n        nouns.add(\"drawer\");\r\n        nouns.add(\"cabinet\");\r\n        nouns.add(\"couch\");\r\n        nouns.add(\"curtain\");\r\n        nouns.add(\"noisemaker\");\r\n        nouns.add(\"lights\");\r\n        nouns.add(\"window\");\r\n        nouns.add(\"fridge\");\r\n        nouns.add(\"car\");\r\n        nouns.add(\"sink\");\r\n        nouns.add(\"desk\");\r\n        nouns.add(\"bed\");\r\n        nouns.add(\"stove\");\r\n        nouns.add(\"shelves\");\r\n        nouns.add(\"bookshelf\");\r\n        nouns.add(\"table\");\r\n        nouns.add(\"chair\");\r\n        nouns.add(\"nightstand\");\r\n        nouns.add(\"counter\");\r\n        nouns.add(\"boxes\");\r\n        nouns.add(\"timer\");\r\n        nouns.add(\"north\");\r\n        nouns.add(\"south\");\r\n        nouns.add(\"west\");\r\n        nouns.add(\"east\");\r\n\r\n    }\r\n\r\n\r\n\r\n    //\r\n    //method that parses user input and returns the string array.\r\n    public String[] parseInput(String input) {\r\n\r\n        /*\r\n        enter a room, look around\r\n        builder see a cabinet and a fridge,\r\n        search individually and smaller objects\r\n        and search those\r\n        */\r\n\r\n        //set these variables equal to null.\r\n        String verb = null;\r\n        String noun = null;\r\n\r\n        //set everything to lowercase and split it by space.\r\n        String[] words = input.toLowerCase().split(\" \");\r\n\r\n        //now check if the word is in our sets through a foreach loop.\r\n        for (String w : words) {\r\n            if(verbs.contains(w))\r\n            {\r\n                verb = w;\r\n            }\r\n            else if (nouns.contains(w))\r\n            {\r\n                noun = w;\r\n            }\r\n            else\r\n            {\r\n                System.out.println(\"This verb and/or noun do not exist in our database. Please type a new command!\");\r\n            }\r\n\r\n        }\r\n\r\n        if (verb == null)\r\n        {\r\n            System.out.println(\"Invalid verb. Please try again!\");\r\n        }\r\n        if (noun == null)\r\n        {\r\n            System.out.println(\"Invalid noun. Please try again!\");\r\n        }\r\n\r\n        //add the verb and noun to commandHistory to keep track of user's moves.\r\n        if(verb != null && noun != null)\r\n        {\r\n            commandHistory.add(verb);\r\n            commandHistory.add(noun);\r\n        }\r\n\r\n        trackMovement(verb, noun);\r\n\r\n        /*\r\n        I need to ensure that the string array returned is indeed in the order of [0] = verb\r\n        and [1] = noun for future usage. For this reason, I'm choosing an Array and not an Arraylist\r\n        because I don't want the size of that Array to dynamically change. Will return a new\r\n        array of size 2 with the new verb and noun.\r\n        */\r\n        return new String[]{verb, noun};\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    //method to scan and send appropriate messages to the player.\r\n    public void scanText() {\r\n\r\n        //create a new scanner for user input\r\n        Scanner scanner = new Scanner(System.in);\r\n        System.out.println(\"Welcome To Home Intrusion! Start the game and enter a verb and noun command \" +\r\n                \"(ex: 'Take Key'): \");\r\n\r\n        //begin the while loop to loop through every person's turn until the game ends.\r\n        while (true)\r\n        {\r\n            //send message prompting user to type a command.\r\n            System.out.println(\"Enter Command: \");\r\n\r\n            //grab the user's input and set equal to a variable.\r\n            String userInput = scanner.nextLine();\r\n\r\n\r\n            //the loop will only break if the user uses the word \"Exit\"\r\n            if (userInput.equalsIgnoreCase(\"exit\"))\r\n            {\r\n                //break out of the loop.\r\n                break;\r\n            }\r\n\r\n            //call my function to parse the userinput.\r\n            parseInput(userInput);\r\n        }\r\n\r\n        System.out.println(\"\\n Game Over!\");\r\n        showCommand();\r\n        commandHistory.clear();\r\n        //Close the scanner\r\n        scanner.close();\r\n\r\n    }\r\n\r\n\r\n\r\n    private void showCommand()\r\n    {\r\n        for(int i = 0; i < commandHistory.size(); i += 2)\r\n        {\r\n            String verbValue = commandHistory.get(i);\r\n            String nounValue = commandHistory.get(i + 1);\r\n            System.out.println(\"Verb: \" + verbValue  + \" |\" + \" Noun: \" + nounValue);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    //switch case method to keep track of\r\n    private void trackMovement(String verb, String noun)\r\n    {\r\n\r\n        /*\r\n        if verb = go\r\n        then we need a switch statement for noun for north, south, east, OR west\r\n         */\r\n\r\n        if(verb.equalsIgnoreCase(\"go\"))\r\n        {\r\n            int xNorth = playerCords.getCoorX() - 1;\r\n            int xSouth = playerCords.getCoorX() + 1;\r\n\r\n            int yEast = playerCords.getCoorY() + 1;\r\n            int yWest = playerCords.getCoorY() - 1;\r\n\r\n            levels.setCoorX(xNorth);\r\n            //levels.getCoorX(xSouth);\r\n            levels.setCoorY(yWest);\r\n\r\n\r\n\r\n            switch (noun) {\r\n                case \"north\":\r\n                    System.out.println(\"Going North!\");\r\n                    playerCords.setCoorX(xNorth);\r\n                    levels.moveNorth();\r\n                    break;\r\n                case \"south\":\r\n                    System.out.println(\"Going South!\");\r\n                    playerCords.setCoorX(xSouth);\r\n                    levels.moveSouth();\r\n                    break;\r\n                case \"west\":\r\n                    System.out.println(\"Going West!\");\r\n                    playerCords.setCoorY(yWest);\r\n                    levels.moveWest();\r\n                    break;\r\n                case \"east\":\r\n                    System.out.println(\"Going East!\");\r\n                    playerCords.setCoorY(yEast);\r\n                    levels.moveEast();\r\n                    break;\r\n\r\n            }\r\n\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    public void createRooms()\r\n    {\r\n        createHallways();\r\n        createBathrooms();\r\n        createGarage();\r\n        createKitchens();\r\n        createLivingRooms();\r\n\r\n\r\n        levels.printMap();\r\n    }\r\n\r\n    public void createHallways()\r\n    {\r\n        Hallway hallwayOne = new HallwayBuilder().picture().build();\r\n        levels.setRoomToGrid(7, 4, hallwayOne);\r\n\r\n        Hallway hallwayTwo = new HallwayBuilder().build();\r\n        levels.setRoomToGrid(6, 4, hallwayTwo);\r\n\r\n        Hallway hallwayThree = new HallwayBuilder().build();\r\n        levels.setRoomToGrid(5,4,hallwayThree);\r\n    }\r\n\r\n    public void createKitchens()\r\n    {\r\n        Kitchen kitchenOne = new KitchenBuilder().bath().toilet().cabinet().build();\r\n        levels.setRoomToGrid(6, 3, kitchenOne);\r\n    }\r\n\r\n    public void createLivingRooms()\r\n    {\r\n        Living livingOne = new LivingBuilder().recliner().couch().build();\r\n        levels.setRoomToGrid(5,3, livingOne);\r\n    }\r\n\r\n    public void createGarage()\r\n    {\r\n        Garage garageOne = new GarageBuilder().car().toolBox().desk().build();\r\n        levels.setRoomToGrid(6, 5, garageOne);\r\n    }\r\n    public void createBathrooms()\r\n    {\r\n        Bath bathOne = new BathBuilder().toilet().shower().sink().build();\r\n        levels.setRoomToGrid(6, 6, bathOne);\r\n    }\r\n    public void setUpGameTimer()\r\n    {\r\n        gameTimer = new GameTimer();\r\n\r\n        gameTimer.start();\r\n    }\r\n\r\n    public void setUpSurvivalTimer()\r\n    {\r\n        survivalTimer = new SurvivalTimer();\r\n        survivalTimer.setSeconds(10);\r\n        survivalTimer.start();\r\n    }\r\n    public Window getWindow() {\r\n        return window;\r\n    }\r\n\r\n\r\n    public void setWindow(Window window) {\r\n        this.window = window;\r\n    }\r\n\r\n\r\n    public Database getDb() {\r\n        return db;\r\n    }\r\n\r\n\r\n    public void setDb(Database db) {\r\n        this.db = db;\r\n    }\r\n\r\n    //create methods to trigger an update between two tables (Inventory and Item)\r\n    //player push button --> trigger methods --> take knife out of Inventory table and put it into Item table\r\n    //if there are 3 knives --> 2 knives left in Inventory table and 1 knife in Item table \r\n\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/controller/ParserEngine.java b/src/controller/ParserEngine.java
--- a/src/controller/ParserEngine.java	(revision 7d4a5fe78879f79c000acc1191f8449f135d1a26)
+++ b/src/controller/ParserEngine.java	(date 1732481045106)
@@ -360,11 +360,4 @@
     public void setDb(Database db) {
         this.db = db;
     }
-
-    //create methods to trigger an update between two tables (Inventory and Item)
-    //player push button --> trigger methods --> take knife out of Inventory table and put it into Item table
-    //if there are 3 knives --> 2 knives left in Inventory table and 1 knife in Item table 
-
-
-
 }
\ No newline at end of file
Index: src/Model/Player.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Model;\r\n\r\npublic class Player {\r\n    private int id; // ID of the player (unique for each player)\r\n    private String name; // Name of the player\r\n    private String achievement; // Achievement the player has earned\r\n\r\n    // Constructor to initialize the Player object with id, name, and achievement\r\n    public Player(int id, String name, String achievement) {\r\n        this.id = id;\r\n        this.name = name;\r\n        this.achievement = achievement;\r\n    }\r\n\r\n    // Getter method for id\r\n    public int getId() {\r\n        return id;\r\n    }\r\n\r\n    // Setter method for id\r\n    public void setId(int id) {\r\n        this.id = id;\r\n    }\r\n\r\n    // Getter method for name\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    // Setter method for name\r\n    public void setName(String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    // Getter method for achievement\r\n    public String getAchievement() {\r\n        return achievement;\r\n    }\r\n\r\n    // Setter method for achievement\r\n    public void setAchievement(String achievement) {\r\n        this.achievement = achievement;\r\n    }\r\n\r\n    // Method to return a string representation of the Player object\r\n    @Override\r\n    public String toString() {\r\n        return \"Player{id=\" + id + \", name='\" + name + \"', achievement='\" + achievement + \"'}\";\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Model/Player.java b/src/Model/Player.java
--- a/src/Model/Player.java	(revision 7d4a5fe78879f79c000acc1191f8449f135d1a26)
+++ b/src/Model/Player.java	(date 1732593286067)
@@ -1,51 +1,112 @@
 package Model;
 
+import java.util.ArrayList;
+import java.util.List;
+
 public class Player {
     private int id; // ID of the player (unique for each player)
     private String name; // Name of the player
     private String achievement; // Achievement the player has earned
+    private String item; // Current item the player possesses
+    private int quantity; // Quantity of the current item
+
+    // Static list to store available items
+    private static final List<String> items = new ArrayList<>();
 
-    // Constructor to initialize the Player object with id, name, and achievement
-    public Player(int id, String name, String achievement) {
+    // Static block to initialize the list of items
+    static {
+        items.add("door");
+        items.add("room");
+        items.add("flashlight");
+        items.add("award");
+        items.add("upstairs");
+        items.add("downstairs");
+        items.add("key");
+    }
+
+    // Constructor to initialize the Player object
+    public Player(int id, String name, String achievement, String item, int quantity) {
         this.id = id;
         this.name = name;
         this.achievement = achievement;
+        this.item = item;
+        this.quantity = quantity;
     }
 
-    // Getter method for id
+    // Getters and setters for all fields
     public int getId() {
         return id;
     }
 
-    // Setter method for id
     public void setId(int id) {
         this.id = id;
     }
 
-    // Getter method for name
     public String getName() {
         return name;
     }
 
-    // Setter method for name
     public void setName(String name) {
         this.name = name;
     }
 
-    // Getter method for achievement
     public String getAchievement() {
         return achievement;
     }
 
-    // Setter method for achievement
     public void setAchievement(String achievement) {
         this.achievement = achievement;
     }
 
-    // Method to return a string representation of the Player object
+    public String getItem() {
+        return item;
+    }
+
+    public void setItem(String item) {
+        this.item = item;
+    }
+
+    public int getQuantity() {
+        return quantity;
+    }
+
+    public void setQuantity(int quantity) {
+        this.quantity = quantity;
+    }
+
+    // Method to decrease the quantity of the item
+    public void decreaseItemQuantity(int decrement) {
+        if (quantity >= decrement) {
+            quantity -= decrement;
+        } else {
+            System.out.println("Not enough quantity to decrease.");
+        }
+    }
+
+    // Method to update the quantity of the item
+    public void updateItemQuantity(int newQuantity) {
+        if (newQuantity >= 0) {
+            this.quantity = newQuantity;
+        } else {
+            System.out.println("Quantity cannot be negative.");
+        }
+    }
+
+    // Static method to get the list of available items
+    public static List<String> getItems() {
+        return items;
+    }
+
+    // toString method to represent the Player object as a string
     @Override
     public String toString() {
-        return "Player{id=" + id + ", name='" + name + "', achievement='" + achievement + "'}";
+        return "Player{" +
+                "id=" + id +
+                ", name='" + name + '\'' +
+                ", achievement='" + achievement + '\'' +
+                ", item='" + item + '\'' +
+                ", quantity=" + quantity +
+                '}';
     }
 }
 
Index: src/Model/Inventory.java
===================================================================
diff --git a/src/Model/Inventory.java b/src/Model/Inventory.java
deleted file mode 100644
--- a/src/Model/Inventory.java	(revision 7d4a5fe78879f79c000acc1191f8449f135d1a26)
+++ /dev/null	(revision 7d4a5fe78879f79c000acc1191f8449f135d1a26)
@@ -1,56 +0,0 @@
-package Model;
-
-import java.util.ArrayList;
-import java.util.List;
-
-public class Inventory {
-    private List<Item> items; // List to store all inventory items
-
-    // Constructor to initialize the inventory list
-    public Inventory() {
-        this.items = new ArrayList<>();
-    }
-
-    // Method to add an item to the inventory
-    public void addItem(Item item) {
-        items.add(item);
-        System.out.println("Item added to inventory: " + item);
-    }
-
-    // Method to remove an item from the inventory by ID
-    public void removeItem(int id) {
-        items.removeIf(item -> item.getId() == id);
-        System.out.println("Item removed with ID: " + id);
-    }
-
-    // Method to update the quantity of an item in the inventory
-    public void updateItemQuantity(int id, int quantityChange) {
-        for (Item item : items) {
-            if (item.getId() == id) {
-                int newQuantity = item.getQuantity() + quantityChange;
-                if (newQuantity < 0) {
-                    System.out.println("Not enough quantity available for item: " + item.getName());
-                } else {
-                    item.setQuantity(newQuantity);
-                    System.out.println("Item updated: " + item);
-                }
-                return;
-            }
-        }
-        System.out.println("Item not found with ID: " + id);
-    }
-
-
-    // Method to display all items in the inventory
-    public void displayInventory() {
-        System.out.println("Current Inventory:");
-        for (Item item : items) {
-            System.out.println(item);
-        }
-    }
-
-    // Method to handle a user taking an item
-    public void takeItem(int id, int quantity) {
-        updateItemQuantity(id, -quantity);
-    }
-}
Index: JavaFinal.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module type=\"JAVA_MODULE\" version=\"4\">\r\n  <component name=\"NewModuleRootManager\" inherit-compiler-output=\"true\">\r\n    <exclude-output />\r\n    <content url=\"file://$MODULE_DIR$\">\r\n      <sourceFolder url=\"file://$MODULE_DIR$/src\" isTestSource=\"false\" />\r\n      <sourceFolder url=\"file://$MODULE_DIR$/src/Logging\" isTestSource=\"false\" />\r\n      <sourceFolder url=\"file://$MODULE_DIR$/src/Resources\" type=\"java-resource\" />\r\n    </content>\r\n    <orderEntry type=\"inheritedJdk\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n    <orderEntry type=\"module-library\" exported=\"\">\r\n      <library>\r\n        <CLASSES>\r\n          <root url=\"jar://$MODULE_DIR$/src/Resources/log4j-api-2.17.2.jar!/\" />\r\n        </CLASSES>\r\n        <JAVADOC />\r\n        <SOURCES />\r\n      </library>\r\n    </orderEntry>\r\n    <orderEntry type=\"module-library\" exported=\"\">\r\n      <library>\r\n        <CLASSES>\r\n          <root url=\"jar://$MODULE_DIR$/src/Resources/log4j-core-2.17.2.jar!/\" />\r\n        </CLASSES>\r\n        <JAVADOC />\r\n        <SOURCES />\r\n      </library>\r\n    </orderEntry>\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/JavaFinal.iml b/JavaFinal.iml
--- a/JavaFinal.iml	(revision 7d4a5fe78879f79c000acc1191f8449f135d1a26)
+++ b/JavaFinal.iml	(date 1732477535712)
@@ -27,5 +27,14 @@
         <SOURCES />
       </library>
     </orderEntry>
+    <orderEntry type="module-library" exported="">
+      <library>
+        <CLASSES>
+          <root url="jar://$MODULE_DIR$/../sqlite-jdbc-3.47.0.0.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES />
+      </library>
+    </orderEntry>
   </component>
 </module>
\ No newline at end of file
Index: src/Model/database/Player.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Model/database/Player.java b/src/Model/database/Player.java
new file mode 100644
--- /dev/null	(date 1732594436790)
+++ b/src/Model/database/Player.java	(date 1732594436790)
@@ -0,0 +1,112 @@
+package Model.database;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class Player {
+    private int id; // ID of the player (unique for each player)
+    private String name; // Name of the player
+    private String achievement; // Achievement the player has earned
+    private String item; // Current item the player possesses
+    private int quantity; // Quantity of the current item
+
+    // Static list to store available items
+    private static final List<String> items = new ArrayList<>();
+
+    // Static block to initialize the list of items
+    static {
+        items.add("door");
+        items.add("room");
+        items.add("flashlight");
+        items.add("award");
+        items.add("upstairs");
+        items.add("downstairs");
+        items.add("key");
+    }
+
+    // Constructor to initialize the Player object
+    public Player(int id, String name, String achievement, String item, int quantity) {
+        this.id = id;
+        this.name = name;
+        this.achievement = achievement;
+        this.item = item;
+        this.quantity = quantity;
+    }
+
+    // Getters and setters for all fields
+    public int getId() {
+        return id;
+    }
+
+    public void setId(int id) {
+        this.id = id;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public String getAchievement() {
+        return achievement;
+    }
+
+    public void setAchievement(String achievement) {
+        this.achievement = achievement;
+    }
+
+    public String getItem() {
+        return item;
+    }
+
+    public void setItem(String item) {
+        this.item = item;
+    }
+
+    public int getQuantity() {
+        return quantity;
+    }
+
+    public void setQuantity(int quantity) {
+        this.quantity = quantity;
+    }
+
+    // Method to decrease the quantity of the item
+    public void decreaseItemQuantity(int decrement) {
+        if (quantity >= decrement) {
+            quantity -= decrement;
+        } else {
+            System.out.println("Not enough quantity to decrease.");
+        }
+    }
+
+    // Method to update the quantity of the item
+    public void updateItemQuantity(int newQuantity) {
+        if (newQuantity >= 0) {
+            this.quantity = newQuantity;
+        } else {
+            System.out.println("Quantity cannot be negative.");
+        }
+    }
+
+    // Static method to get the list of available items
+    public static List<String> getItems() {
+        return items;
+    }
+
+    // toString method to represent the Player object as a string
+    @Override
+    public String toString() {
+        return "Player{" +
+                "id=" + id +
+                ", name='" + name + '\'' +
+                ", achievement='" + achievement + '\'' +
+                ", item='" + item + '\'' +
+                ", quantity=" + quantity +
+                '}';
+    }
+}
+
Index: src/Model/database/Testconnection.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Model/database/Testconnection.java b/src/Model/database/Testconnection.java
new file mode 100644
--- /dev/null	(date 1732594436807)
+++ b/src/Model/database/Testconnection.java	(date 1732594436807)
@@ -0,0 +1,19 @@
+package Model.database;
+import Model.Database;
+
+import java.sql.Connection;
+import java.sql.SQLException;
+
+//class to test database connection
+public class Testconnection {
+    public static void main(String[] args) throws SQLException {
+        Model.Database db = new Database();
+        Connection connection = db.getConnection();
+
+        if (connection != null) {
+            System.out.println("Database connection established successfully!");
+        } else {
+            System.out.println("Failed to establish database connection.");
+        }
+    }
+}
Index: src/Model/database/Database.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Model/database/Database.java b/src/Model/database/Database.java
new file mode 100644
--- /dev/null	(date 1732594436785)
+++ b/src/Model/database/Database.java	(date 1732594436785)
@@ -0,0 +1,83 @@
+package Model.database;
+
+import Model.Item;
+
+import java.sql.*;
+
+public class Database {
+    private Connection databaseLink;
+
+    // Method to establish a connection to the SQLite database
+    public Connection getConnection() throws SQLException
+    {
+        Connection conn = null;
+        try
+        {
+            conn = DriverManager.getConnection("jdbc:sqlite:src/Resources/FinalJava.db");
+            System.out.println("Connection Established");
+        }
+        catch (SQLException e)
+        {
+            System.out.println(e.getMessage());
+            throw e;
+        }
+
+        return conn;
+    }
+    //Project 4.5 assignment
+    // Method to add an item to the database
+    public void addItem(Item item) throws SQLException {
+        String query = "INSERT INTO items (id, name, quantity) VALUES (?, ?, ?)";
+        try (Connection conn = getConnection();
+             PreparedStatement pstmt = conn.prepareStatement(query)) {
+            pstmt.setInt(1, item.getId());
+            pstmt.setString(2, item.getName());
+            pstmt.setInt(3, item.getQuantity());
+            pstmt.executeUpdate();
+            System.out.println("Item added: " + item);
+        }
+    }
+
+    // Method to delete an item from the database
+    public void deleteItem(int id) throws SQLException {
+        String query = "DELETE FROM items WHERE id = ?";
+        try (Connection conn = getConnection();
+             PreparedStatement pstmt = conn.prepareStatement(query)) {
+            pstmt.setInt(1, id);
+            pstmt.executeUpdate();
+            System.out.println("Item deleted with ID: " + id);
+        }
+    }
+
+    // Method to update an item's quantity in the database
+    public void updateItemQuantity(int id, int newQuantity) throws SQLException {
+        String query = "UPDATE items SET quantity = ? WHERE id = ?";
+        try (Connection conn = getConnection();
+             PreparedStatement pstmt = conn.prepareStatement(query)) {
+            pstmt.setInt(1, newQuantity);
+            pstmt.setInt(2, id);
+            pstmt.executeUpdate();
+            System.out.println("Item updated: ID=" + id + ", New Quantity=" + newQuantity);
+        }
+    }
+
+    // Method to retrieve an item by its ID
+    public Item getItemById(int id) throws SQLException {
+        String query = "SELECT * FROM items WHERE id = ?";
+        try (Connection conn = getConnection(); // Use getConnection() to get the connection
+             PreparedStatement pstmt = conn.prepareStatement(query)) {
+            pstmt.setInt(1, id);  // Set the item ID in the query
+            ResultSet rs = pstmt.executeQuery(); // Execute the query
+
+            if (rs.next()) {
+                int itemId = rs.getInt("id");
+                String itemName = rs.getString("name");
+                int itemQuantity = rs.getInt("quantity");
+                return new Item(itemId, itemName, itemQuantity); // Return the Item object
+            } else {
+                System.out.println("Item not found with ID: " + id);
+                return null;
+            }
+        }
+    }
+}
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"dcbe192d-e3e1-431d-81f5-a51ad6d66bca\" name=\"Changes\" comment=\"Revert change\">\r\n      <change afterPath=\"$PROJECT_DIR$/src/Model/PlayerCords.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/Main/AppClient.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/Main/AppClient.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/View/Window.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/View/Window.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/controller/ParserEngine.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/controller/ParserEngine.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/levels/LevelGridSystem.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/levels/LevelGridSystem.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Interface\" />\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"master\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;Randall442&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">{\r\n  &quot;selectedUrlAndAccountId&quot;: {\r\n    &quot;url&quot;: &quot;https://github.com/alauth22/JavaFinal.git&quot;,\r\n    &quot;accountId&quot;: &quot;525ed17e-c4cb-4d8e-8e1a-76a31f6b28ac&quot;\r\n  }\r\n}</component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 2\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2oLyYtKiThOQWtgf2Xsi1uEuxjn\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;Application.LoggingExample.executor&quot;: &quot;Run&quot;,\r\n    &quot;Application.Main.executor&quot;: &quot;Run&quot;,\r\n    &quot;Application.Testconnection.executor&quot;: &quot;Run&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;ameliaBranch&quot;,\r\n    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/Randy/IdeaProjects/JavaFinal2/src/Resources/log4j-core-2.17.2.jar&quot;,\r\n    &quot;project.structure.last.edited&quot;: &quot;Modules&quot;,\r\n    &quot;project.structure.proportion&quot;: &quot;0.15&quot;,\r\n    &quot;project.structure.side.proportion&quot;: &quot;0.2&quot;\r\n  }\r\n}</component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"dcbe192d-e3e1-431d-81f5-a51ad6d66bca\" name=\"Changes\" comment=\"\" />\r\n      <created>1730663201018</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1730663201018</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Commit to LoggingExample.java and write to Flat File - Mariana\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1730848770233</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1730848770233</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Revert change\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1730853636491</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1730853636491</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"3\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"Commit to LoggingExample.java and write to Flat File - Mariana\" />\r\n    <MESSAGE value=\"Revert change\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Revert change\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 7d4a5fe78879f79c000acc1191f8449f135d1a26)
+++ b/.idea/workspace.xml	(date 1732595424732)
@@ -5,12 +5,17 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="dcbe192d-e3e1-431d-81f5-a51ad6d66bca" name="Changes" comment="Revert change">
-      <change afterPath="$PROJECT_DIR$/src/Model/PlayerCords.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/Model/database/Database.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/Model/database/Player.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/Model/database/Testconnection.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/Main/AppClient.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Main/AppClient.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/View/Window.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/View/Window.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/JavaFinal.iml" beforeDir="false" afterPath="$PROJECT_DIR$/JavaFinal.iml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/Main/Main.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Main/Main.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/Model/Database.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Model/Database.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/Model/Inventory.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/Model/Player.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Model/Player.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/controller/ParserEngine.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/controller/ParserEngine.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/levels/LevelGridSystem.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/levels/LevelGridSystem.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -20,17 +25,11 @@
   <component name="FileTemplateManagerImpl">
     <option name="RECENT_TEMPLATES">
       <list>
-        <option value="Interface" />
         <option value="Class" />
       </list>
     </option>
   </component>
   <component name="Git.Settings">
-    <option name="RECENT_BRANCH_BY_REPOSITORY">
-      <map>
-        <entry key="$PROJECT_DIR$" value="master" />
-      </map>
-    </option>
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
   </component>
   <component name="GitHubPullRequestSearchHistory">{
@@ -42,7 +41,7 @@
   <component name="GithubPullRequestsUISettings">{
   &quot;selectedUrlAndAccountId&quot;: {
     &quot;url&quot;: &quot;https://github.com/alauth22/JavaFinal.git&quot;,
-    &quot;accountId&quot;: &quot;525ed17e-c4cb-4d8e-8e1a-76a31f6b28ac&quot;
+    &quot;accountId&quot;: &quot;63891d79-37a5-40ba-a408-9409a942d22f&quot;
   }
 }</component>
   <component name="ProjectColorInfo">{
@@ -54,21 +53,27 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent">{
-  &quot;keyToString&quot;: {
-    &quot;Application.LoggingExample.executor&quot;: &quot;Run&quot;,
-    &quot;Application.Main.executor&quot;: &quot;Run&quot;,
-    &quot;Application.Testconnection.executor&quot;: &quot;Run&quot;,
-    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
-    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,
-    &quot;git-widget-placeholder&quot;: &quot;ameliaBranch&quot;,
-    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,
-    &quot;last_opened_file_path&quot;: &quot;C:/Users/Randy/IdeaProjects/JavaFinal2/src/Resources/log4j-core-2.17.2.jar&quot;,
-    &quot;project.structure.last.edited&quot;: &quot;Modules&quot;,
-    &quot;project.structure.proportion&quot;: &quot;0.15&quot;,
-    &quot;project.structure.side.proportion&quot;: &quot;0.2&quot;
+  <component name="PropertiesComponent"><![CDATA[{
+  "keyToString": {
+    "Application.LoggingExample.executor": "Run",
+    "Application.Main.executor": "Run",
+    "Application.Testconnection.executor": "Run",
+    "RunOnceActivity.ShowReadmeOnStart": "true",
+    "SHARE_PROJECT_CONFIGURATION_FILES": "true",
+    "git-widget-placeholder": "#65 on master",
+    "kotlin-language-version-configured": "true",
+    "last_opened_file_path": "C:/Users/maria/Downloads/sqlite-jdbc-3.47.0.0.jar",
+    "project.structure.last.edited": "Modules",
+    "project.structure.proportion": "0.15",
+    "project.structure.side.proportion": "0.2"
   }
-}</component>
+}]]></component>
+  <component name="RecentsManager">
+    <key name="CopyClassDialog.RECENTS_KEY">
+      <recent name="Model.database" />
+      <recent name="Model.Database" />
+    </key>
+  </component>
   <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
   <component name="TaskManager">
     <task active="true" id="Default" summary="Default task">
@@ -94,8 +99,35 @@
       <option name="project" value="LOCAL" />
       <updated>1730853636491</updated>
     </task>
-    <option name="localTasksCounter" value="3" />
+    <task id="LOCAL-00003" summary="Revert change">
+      <option name="closed" value="true" />
+      <created>1731380359013</created>
+      <option name="number" value="00003" />
+      <option name="presentableId" value="LOCAL-00003" />
+      <option name="project" value="LOCAL" />
+      <updated>1731380359013</updated>
+    </task>
+    <task id="LOCAL-00004" summary="Revert change">
+      <option name="closed" value="true" />
+      <created>1731380525152</created>
+      <option name="number" value="00004" />
+      <option name="presentableId" value="LOCAL-00004" />
+      <option name="project" value="LOCAL" />
+      <updated>1731380525152</updated>
+    </task>
+    <option name="localTasksCounter" value="5" />
     <servers />
+  </component>
+  <component name="Vcs.Log.Tabs.Properties">
+    <option name="TAB_STATES">
+      <map>
+        <entry key="MAIN">
+          <value>
+            <State />
+          </value>
+        </entry>
+      </map>
+    </option>
   </component>
   <component name="VcsManagerConfiguration">
     <MESSAGE value="Commit to LoggingExample.java and write to Flat File - Mariana" />
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_23\" default=\"true\" project-jdk-name=\"22\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/out\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 7d4a5fe78879f79c000acc1191f8449f135d1a26)
+++ b/.idea/misc.xml	(date 1732477541392)
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_23" default="true" project-jdk-name="22" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_22" default="true" project-jdk-name="22" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/out" />
   </component>
 </project>
\ No newline at end of file
